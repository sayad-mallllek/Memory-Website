"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateMIMEType = exports.validateBufferMIMEType = void 0;
const assert_1 = __importDefault(require("assert"));
const image_type_1 = __importDefault(require("image-type"));
const read_chunk_1 = __importDefault(require("read-chunk"));
const is_svg_1 = __importDefault(require("is-svg"));
const fs = __importStar(require("fs"));
const BINARY_READ_LENGTH = 24;
const isBinary = (buffer) => {
    for (let i = 0; i < BINARY_READ_LENGTH; i++) {
        const characterCode = buffer[i];
        if (characterCode === 65533 || characterCode <= 8) {
            return true;
        }
    }
    return false;
};
/**
 * Detect the image type of a Buffer or Uint8Array
 * This check is based on https://github.com/sindresorhus/image-type
 */
function validateBufferMIMEType(buffer, options) {
    const mimeTypes = options.allowMimeTypes;
    assert_1.default.ok(Array.isArray(mimeTypes) && mimeTypes.every((mimeType) => mimeType.includes("/")), `Should be set an array of mimeType. e.g.) ['image/jpeg']`);
    const imageTypeResult = image_type_1.default(buffer);
    if (!imageTypeResult) {
        return {
            ok: false,
            error: new Error(`This buffer is not supported image. allowMimeTypes: ${JSON.stringify(mimeTypes)}` +
                (options.originalFilename ? `, filename: ${options.originalFilename}` : "")),
        };
    }
    const isAllowed = mimeTypes.includes(imageTypeResult.mime);
    if (!isAllowed) {
        return {
            ok: false,
            error: new Error(`This buffer is disallowed image MimeType: ${imageTypeResult.mime}, allowMimeTypes: ${JSON.stringify(mimeTypes)}` + (options.originalFilename ? `,filename: ${options.originalFilename}` : "")),
        };
    }
    return {
        ok: true,
        error: undefined,
    };
}
exports.validateBufferMIMEType = validateBufferMIMEType;
/**
 * Detect the image type of a filePath
 * @example
 *
 * ```
 * const validationResult = validateMIMEType("test.png", {
 *     allowMimeTypes: ['image/jpeg', 'image/gif', 'image/png', 'image/svg+xml']
 * });
 * if(validationResult) {
 *   console.error(validationResult)
 * }
 * ```
 */
function validateMIMEType(filePath, options) {
    // Use head buffer for performance reason
    const buffer = read_chunk_1.default.sync(filePath, 0, BINARY_READ_LENGTH);
    if (!isBinary(buffer)) {
        const mimeTypes = options.allowMimeTypes;
        // Handle SVG as special case
        // https://github.com/sindresorhus/is-svg
        const allowSVG = mimeTypes.includes("image/svg+xml");
        if (allowSVG) {
            // if the content is not binary, read all content and check it
            // Note: Require 128 bytes at least one
            const content = fs.readFileSync(filePath, "utf-8");
            if (!is_svg_1.default(content)) {
                return {
                    ok: false,
                    error: new Error(`This file is not svg. allowMimeTypes: ${JSON.stringify(mimeTypes)}` +
                        (options.originalFilename ? `, filename: ${options.originalFilename}` : "")),
                };
            }
            return {
                ok: true,
            };
        }
    }
    return validateBufferMIMEType(buffer, options);
}
exports.validateMIMEType = validateMIMEType;
//# sourceMappingURL=validate-image-type.js.map