{"ast":null,"code":"import Joi from \"joi-browser\";\nimport FormError from \"../Errors/FormError\"; //Schemas\n\nconst postSchema = {\n  title: Joi.string().required().min(1),\n  text: Joi.string().required().min(1)\n};\nconst commentSchema = {\n  comment: Joi.string().required().min(1)\n};\nconst userRegistrationSchema = {\n  username: Joi.string().min(4).max(23).required(),\n  email: Joi.string().min(4).max(32).required().email(),\n  password: Joi.string().min(5).max(255).required()\n};\nconst userLoginSchema = {\n  username: Joi.string().min(4).max(23).required(),\n  password: Joi.string().min(5).max(255).required()\n}; //Validations\n\nexport const validateInputText = post => {\n  // console.log(post);\n  return Joi.validate(post, postSchema);\n};\nexport const validateInputFile = imageFile => {\n  if (!imageFile) {\n    return new FormError(\"[File input must not be empty!]\");\n  }\n\n  if (!imageFile.name.match(/\\.(jpg|jpeg|png)$/)) {\n    return new FormError(\"Invalid image type! Please select a valid image type! (jpg|jpeg|png)\");\n  }\n};\nexport const validateComment = comment => {\n  return Joi.validate(comment, commentSchema);\n};\nexport const validateRegisterUser = user => {\n  return Joi.validate(user, userRegistrationSchema);\n};\nexport const validateLoginUser = user => {\n  return Joi.validate(user, userLoginSchema);\n}; //Handlers\n\nexport const handleChange = (event, formValue, setFormValue) => {\n  setFormValue({ ...formValue,\n    [event.target.name]: event.target.value\n  });\n};\nexport const handleFileChange = (event, formValue, setFormValue) => {\n  setFormValue({ ...formValue,\n    [event.target.name]: event.target.files[0]\n  });\n};","map":{"version":3,"sources":["C:/Users/bob/Documents/React/Memory/memory/src/Services/FormService.js"],"names":["Joi","FormError","postSchema","title","string","required","min","text","commentSchema","comment","userRegistrationSchema","username","max","email","password","userLoginSchema","validateInputText","post","validate","validateInputFile","imageFile","name","match","validateComment","validateRegisterUser","user","validateLoginUser","handleChange","event","formValue","setFormValue","target","value","handleFileChange","files"],"mappings":"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","sourcesContent":["import Joi from \"joi-browser\";\r\nimport FormError from \"../Errors/FormError\";\r\n\r\n//Schemas\r\n\r\nconst postSchema = {\r\n  title: Joi.string().required().min(1),\r\n  text: Joi.string().required().min(1),\r\n};\r\n\r\nconst commentSchema = {\r\n  comment: Joi.string().required().min(1),\r\n};\r\n\r\nconst userRegistrationSchema = {\r\n  username: Joi.string().min(4).max(23).required(),\r\n  email: Joi.string().min(4).max(32).required().email(),\r\n  password: Joi.string().min(5).max(255).required(),\r\n};\r\n\r\nconst userLoginSchema = {\r\n  username: Joi.string().min(4).max(23).required(),\r\n  password: Joi.string().min(5).max(255).required(),\r\n};\r\n\r\n//Validations\r\n\r\nexport const validateInputText = (post) => {\r\n  // console.log(post);\r\n  return Joi.validate(post, postSchema);\r\n};\r\n\r\nexport const validateInputFile = (imageFile) => {\r\n  if (!imageFile) {\r\n    return new FormError(\"[File input must not be empty!]\");\r\n  }\r\n  if (!imageFile.name.match(/\\.(jpg|jpeg|png)$/)) {\r\n    return new FormError(\r\n      \"Invalid image type! Please select a valid image type! (jpg|jpeg|png)\"\r\n    );\r\n  }\r\n};\r\n\r\nexport const validateComment = (comment) => {\r\n  return Joi.validate(comment, commentSchema);\r\n};\r\n\r\nexport const validateRegisterUser = (user) => {\r\n  return Joi.validate(user, userRegistrationSchema);\r\n};\r\n\r\nexport const validateLoginUser = (user) => {\r\n  return Joi.validate(user, userLoginSchema);\r\n};\r\n\r\n//Handlers\r\n\r\nexport const handleChange = (event, formValue, setFormValue) => {\r\n  setFormValue({\r\n    ...formValue,\r\n    [event.target.name]: event.target.value,\r\n  });\r\n};\r\nexport const handleFileChange = (event, formValue, setFormValue) => {\r\n  setFormValue({\r\n    ...formValue,\r\n    [event.target.name]: event.target.files[0],\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}