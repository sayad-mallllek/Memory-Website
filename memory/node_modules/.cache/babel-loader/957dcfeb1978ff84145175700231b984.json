{"ast":null,"code":"import { apiUrl } from \"../config.json\";\nimport axios from \"axios\";\nimport { validateInputText, validateInputFile, validateComment } from \"../Services/FormService\";\nimport FormError from \"../Errors/FormError\";\nimport httpService from \"./httpService\"; // console.log(auth.getToken());\n\nexport const getPosts = async () => {\n  const posts = await httpService.Get(`${apiUrl}/posts`);\n  return posts;\n};\nexport const getPost = async id => {\n  const post = await httpService.Get(`${apiUrl}/posts/${id}`);\n  return post;\n};\nexport const sendPost = async post => {\n  try {\n    console.log(post);\n    let {\n      error\n    } = validateInputText({\n      title: post.get(\"title\"),\n      text: post.get(\"text\")\n    });\n\n    if (error) {\n      return error.message;\n    }\n\n    let imageError = validateInputFile(post.get(\"img\"));\n    if (imageError) return imageError.message;\n    const response = await httpService.PostMultiPart(`${apiUrl}/posts`, post);\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\nexport const updatePost = async (post, id) => {\n  try {\n    let {\n      error\n    } = validateInputText({\n      title: post.title,\n      text: post.text\n    });\n\n    if (error) {\n      return error.message;\n    }\n\n    const response = await httpService.Put(`${apiUrl}/posts/${id}`, post);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return error;\n  }\n};\nexport const deletePost = async id => {\n  try {\n    const response = await httpService.Delete(`${apiUrl}/posts/${id}`);\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\nexport const sendComment = async (comment, postId) => {\n  try {\n    let {\n      error\n    } = validateComment(comment);\n\n    if (error) {\n      return error.message;\n    }\n\n    const response = await axios({\n      method: \"post\",\n      url: apiUrl + \"/posts/\" + postId + \"/comments\",\n      data: comment,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response;\n  } catch (error) {\n    return error;\n  }\n};","map":{"version":3,"sources":["C:/Users/bob/Documents/React/Memory/memory/src/Services/PostService.js"],"names":["apiUrl","axios","validateInputText","validateInputFile","validateComment","FormError","httpService","getPosts","posts","Get","getPost","id","post","sendPost","console","log","error","title","get","text","message","imageError","response","PostMultiPart","updatePost","Put","deletePost","Delete","sendComment","comment","postId","method","url","data","headers"],"mappings":"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","sourcesContent":["import { apiUrl } from \"../config.json\";\r\nimport axios from \"axios\";\r\nimport {\r\n  validateInputText,\r\n  validateInputFile,\r\n  validateComment,\r\n} from \"../Services/FormService\";\r\nimport FormError from \"../Errors/FormError\";\r\nimport httpService from \"./httpService\";\r\n\r\n// console.log(auth.getToken());\r\n\r\nexport const getPosts = async () => {\r\n  const posts = await httpService.Get(`${apiUrl}/posts`);\r\n  return posts;\r\n};\r\n\r\nexport const getPost = async (id) => {\r\n  const post = await httpService.Get(`${apiUrl}/posts/${id}`);\r\n  return post;\r\n};\r\n\r\nexport const sendPost = async (post) => {\r\n  try {\r\n    console.log(post);\r\n    let { error } = validateInputText({\r\n      title: post.get(\"title\"),\r\n      text: post.get(\"text\"),\r\n    });\r\n    if (error) {\r\n      return error.message;\r\n    }\r\n\r\n    let imageError = validateInputFile(post.get(\"img\"));\r\n    if (imageError) return imageError.message;\r\n    const response = await httpService.PostMultiPart(`${apiUrl}/posts`, post);\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const updatePost = async (post, id) => {\r\n  try {\r\n    let { error } = validateInputText({\r\n      title: post.title,\r\n      text: post.text,\r\n    });\r\n    if (error) {\r\n      return error.message;\r\n    }\r\n\r\n    const response = await httpService.Put(`${apiUrl}/posts/${id}`, post);\r\n    return response;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const deletePost = async (id) => {\r\n  try {\r\n    const response = await httpService.Delete(`${apiUrl}/posts/${id}`);\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const sendComment = async (comment, postId) => {\r\n  try {\r\n    let { error } = validateComment(comment);\r\n    if (error) {\r\n      return error.message;\r\n    }\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: apiUrl + \"/posts/\" + postId + \"/comments\",\r\n      data: comment,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}