{"ast":null,"code":"import { apiUrl } from \"../config.json\";\nimport axios from \"axios\";\nimport { validateLoginUser, validateRegisterUser } from \"../Services/FormService\";\nimport jwtDecode from \"jwt-decode\";\nimport auth from \"./AuthService\";\naxios.default.headers['x-auth-token'] = auth.getToken();\nexport const createUser = async user => {\n  try {\n    let {\n      error\n    } = validateRegisterUser(user);\n    if (error) return error.message;\n    const response = await axios({\n      method: \"post\",\n      url: apiUrl + \"/users\",\n      data: user,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const {\n      data: jwt\n    } = response;\n    console.log(jwt);\n    auth.setToken(jwt);\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\nexport const loginUser = async user => {\n  try {\n    let {\n      error\n    } = validateLoginUser(user);\n    if (error) return error.message;\n    const response = await axios({\n      method: \"post\",\n      url: apiUrl + \"/auth\",\n      data: user,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const {\n      data: jwt\n    } = response;\n    auth.setToken(jwt);\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\nexport const logoutUser = () => {\n  auth.removeToken();\n  window.location.replace(\"/\");\n};\nexport const getUser = () => {\n  const jwt = auth.getToken();\n  console.log(jwt);\n\n  if (jwt) {\n    const user = jwtDecode(jwt);\n    return user;\n  }\n};","map":{"version":3,"sources":["C:/Users/bob/Documents/React/Memory/memory/src/Services/UserService.js"],"names":["apiUrl","axios","validateLoginUser","validateRegisterUser","jwtDecode","auth","default","headers","getToken","createUser","user","error","message","response","method","url","data","jwt","console","log","setToken","loginUser","logoutUser","removeToken","window","location","replace","getUser"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,oBAFF,QAGO,yBAHP;AAIA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEAJ,KAAK,CAACK,OAAN,CAAcC,OAAd,CAAsB,cAAtB,IAAwCF,IAAI,CAACG,QAAL,EAAxC;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACxC,MAAI;AACF,QAAI;AAAEC,MAAAA;AAAF,QAAYR,oBAAoB,CAACO,IAAD,CAApC;AACA,QAAIC,KAAJ,EAAW,OAAOA,KAAK,CAACC,OAAb;AAEX,UAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAAC;AAC3Ba,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,GAAG,EAAEf,MAAM,GAAG,QAFa;AAG3BgB,MAAAA,IAAI,EAAEN,IAHqB;AAI3BH,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAJkB,KAAD,CAA5B;AAMA,UAAM;AAAES,MAAAA,IAAI,EAAEC;AAAR,QAAgBJ,QAAtB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,IAAAA,IAAI,CAACe,QAAL,CAAcH,GAAd;AACA,WAAOJ,QAAP;AACD,GAdD,CAcE,OAAOF,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAlBM;AAoBP,OAAO,MAAMU,SAAS,GAAG,MAAOX,IAAP,IAAgB;AACvC,MAAI;AACF,QAAI;AAAEC,MAAAA;AAAF,QAAYT,iBAAiB,CAACQ,IAAD,CAAjC;AACA,QAAIC,KAAJ,EAAW,OAAOA,KAAK,CAACC,OAAb;AAEX,UAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAAC;AAC3Ba,MAAAA,MAAM,EAAE,MADmB;AAE3BC,MAAAA,GAAG,EAAEf,MAAM,GAAG,OAFa;AAG3BgB,MAAAA,IAAI,EAAEN,IAHqB;AAI3BH,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAJkB,KAAD,CAA5B;AAOA,UAAM;AAAES,MAAAA,IAAI,EAAEC;AAAR,QAAgBJ,QAAtB;AACAR,IAAAA,IAAI,CAACe,QAAL,CAAcH,GAAd;AACA,WAAOJ,QAAP;AACD,GAdD,CAcE,OAAOF,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAlBM;AAoBP,OAAO,MAAMW,UAAU,GAAG,MAAM;AAC9BjB,EAAAA,IAAI,CAACkB,WAAL;AACAC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB,GAAxB;AACD,CAHM;AAOP,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,QAAMV,GAAG,GAAGZ,IAAI,CAACG,QAAL,EAAZ;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,MAAIA,GAAJ,EAAS;AACP,UAAMP,IAAI,GAAGN,SAAS,CAACa,GAAD,CAAtB;AACA,WAAOP,IAAP;AACD;AACF,CAPM","sourcesContent":["import { apiUrl } from \"../config.json\";\r\nimport axios from \"axios\";\r\nimport {\r\n  validateLoginUser,\r\n  validateRegisterUser,\r\n} from \"../Services/FormService\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport auth from \"./AuthService\"\r\n\r\naxios.default.headers['x-auth-token'] = auth.getToken();\r\n\r\nexport const createUser = async (user) => {\r\n  try {\r\n    let { error } = validateRegisterUser(user);\r\n    if (error) return error.message;\r\n\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: apiUrl + \"/users\",\r\n      data: user,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    const { data: jwt } = response;\r\n    console.log(jwt);\r\n    auth.setToken(jwt);\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const loginUser = async (user) => {\r\n  try {\r\n    let { error } = validateLoginUser(user);\r\n    if (error) return error.message;\r\n\r\n    const response = await axios({\r\n      method: \"post\",\r\n      url: apiUrl + \"/auth\",\r\n      data: user,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    const { data: jwt } = response;\r\n    auth.setToken(jwt);\r\n    return response;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const logoutUser = () => {\r\n  auth.removeToken();\r\n  window.location.replace(\"/\");\r\n};\r\n\r\n\r\n\r\nexport const getUser = () => {\r\n  const jwt = auth.getToken();\r\n  console.log(jwt);\r\n  if (jwt) {\r\n    const user = jwtDecode(jwt);\r\n    return user;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}